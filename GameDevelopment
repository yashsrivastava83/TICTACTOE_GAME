import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;

public class TicTacToe extends JFrame implements ActionListener {
    public static  int BOARD_SIZE=3;
    public static  enum GameStatus{
        Incomplete, Xwins,Zwins,tie
    }
    private JButton[][] buttons=new JButton[BOARD_SIZE][BOARD_SIZE];
    Boolean crossTurn=true;
    public TicTacToe(){
        super.setTitle("TicTacToe");
        super.setSize(800,800);
        GridLayout grid=new GridLayout(BOARD_SIZE,BOARD_SIZE);
        super.setLayout(grid);
        Font font=new Font("Comic sans",1,150);
        for(int row=0;row<BOARD_SIZE;row++)
        {
            for(int col=0;col<BOARD_SIZE;col++)
            {
                JButton button=new JButton("");
                buttons[row][col]=button;
                button.setFont(font);
                button.addActionListener(this);
                super.add(button);
            }
        }
        super.setResizable(false);

        super.setVisible(true);

    }
    @Override
    public void actionPerformed(ActionEvent e) {
        JButton clickbutton=(JButton)e.getSource();
        makeMove(clickbutton);
        GameStatus gs=this.getGameStatus();
        if(gs==GameStatus.Incomplete)
        {
            return;
        }
        declareWinner(gs);
        int choice=JOptionPane.showConfirmDialog(this,"DO you Want To Play Again");
        if(choice==JOptionPane.YES_OPTION){
            for(int row=0;row<BOARD_SIZE;row++)
            {
                for(int col=0;col<BOARD_SIZE;col++)
                {
                    buttons[row][col].setText("");

                }
            }
            crossTurn=true;
        }else{
            super.dispose();
        }
    }

    private void declareWinner(GameStatus gs) {
        if(gs==GameStatus.Xwins){
            JOptionPane.showMessageDialog(this,"X Wins");
        }
        else if(gs==GameStatus.Zwins){
            JOptionPane.showMessageDialog(this,"Z Wins");
        }
        else{
            JOptionPane.showMessageDialog(this,"It is Tie");
        }
    }

    private void makeMove(JButton clickbutton) {
        String btntext=clickbutton.getText();
        if(btntext.length()>0)
        {
            JOptionPane.showMessageDialog(this,"Invalid Move");
        }
        else
        {
            if(crossTurn)
            {
                clickbutton.setText("X");
            }else
            {
                clickbutton.setText("0");
            }
            crossTurn=!crossTurn;
        }
    }
    private GameStatus getGameStatus(){
        String text1="",text2="";
        int row=0,col=0;
        row=0;
        while(row<BOARD_SIZE){
            col=0;
            while(col < BOARD_SIZE-1){
                text1=buttons[row][col].getText();
                text2=buttons[row][col+1].getText();
                if(!text1.equals(text2) || text1.length()==0){
                    break;
                }
                col++;
            }
            if(col==BOARD_SIZE-1){
                if(text1.equals("X")){
                    return GameStatus.Xwins;
                }
                else{
                    return GameStatus.Zwins;
                }
            }
            row++;
        }
        col=0;
        while(row<BOARD_SIZE){
            row=0;
            while(row < BOARD_SIZE-1){
                text1=buttons[row][col].getText();
                text2=buttons[row+1][col].getText();
                if(!text1.equals(text2) || text1.length()==0){
                    break;
                }
                row++;
            }
            if(row==BOARD_SIZE-1){
                if(text1.equals("X")){
                    return GameStatus.Xwins;
                }
                else{
                    return GameStatus.Zwins;
                }
            }
            col++;
        }
        // test dagonal

        row=0;
        col=0;
        while(row<BOARD_SIZE-1){
            text1=buttons[row][col].getText();
            text2=buttons[row+1][col+1].getText();
            if(!text1.equals(text2) || text1.length()==0){
                break;
            }
            row++;
            col++;
        }
        if(row==BOARD_SIZE){
            if(text1.equals("X")){
                return GameStatus.Xwins;
            }
            else{
                return GameStatus.Zwins;
            }
        }
        row=BOARD_SIZE-1;
        col=0;
        while(row>0){
            text1=buttons[row][col].getText();
            text2=buttons[row-1][col+1].getText();
            if(!text1.equals(text2) || text1.length()==0){
                break;
            }
            row--;
            col++;
        }
        if(row==0){
            if(text1.equals("X")){
                return GameStatus.Xwins;
            }
            else{
                return GameStatus.Zwins;
            }
        }
        row=0;
        col=BOARD_SIZE-1;
        while(col>0){
            text1=buttons[row][col].getText();
            text2=buttons[row+1][col-1].getText();
            if(!text1.equals(text2) || text1.length()==0){
                break;
            }
            row++;
            col--;
        }
        if(col==0){
            if(text1.equals("X")){
                return GameStatus.Xwins;
            }
            else{
                return GameStatus.Zwins;
            }
        }
        String text="";
        for( row=0;row<BOARD_SIZE;row++) {
            for ( col = 0; col < BOARD_SIZE; col++) {
                String txt = buttons[row][col].getText();
                if(txt.length()==0)
                {
                    return GameStatus.Incomplete;
                }
            }
        }
        return GameStatus.tie;
        
       
    }

    public static void main(String args[]){
        TicTacToe t=new TicTacToe();
    }
}

